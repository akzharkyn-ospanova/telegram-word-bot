import json
import asyncio
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from apscheduler.schedulers.background import BackgroundScheduler
import pytz

# üîë –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–û–ö–ï–ù –û–¢ BotFather
BOT_TOKEN = "8440232593:AAFR3Lq2Ox2oPlSnMFqZ_6hm0vQpiFBWW90"

# üî¢ –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô chat_id, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—à—å —á–µ—Ä–µ–∑ /id
YOUR_CHAT_ID = 123456789

WORDS_FILE = "words.json"

# -------------------------------
# –•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í
# -------------------------------

def load_words():
    try:
        with open(WORDS_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_words(words):
    with open(WORDS_FILE, "w") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

# -------------------------------
# –ö–û–ú–ê–ù–î–´
# -------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥")

async def show_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–≤–æ–π chat_id: {update.message.chat_id}")

async def add_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if " - " not in text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥")
        return

    word, translation = text.split(" - ", 1)
    words = load_words()
    words.append({
        "word": word.strip(),
        "translation": translation.strip(),
        "next_review": datetime.now().isoformat()
    })
    save_words(words)
    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# -------------------------------
# –ü–û–í–¢–û–†–ï–ù–ò–ï
# -------------------------------

user_progress = {}

async def send_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    words = load_words()

    if chat_id not in user_progress:
        user_progress[chat_id] = {
            "current_index": 0
        }

    index = user_progress[chat_id]["current_index"]

    if index >= len(words):
        await update.message.reply_text("–í—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return

    word = words[index]
    user_progress[chat_id]["awaiting_answer"] = word
    await update.message.reply_text(f"–ü–µ—Ä–µ–≤–µ–¥–∏: {word['word']}")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id

    if chat_id not in user_progress or "awaiting_answer" not in user_progress[chat_id]:
        await add_word(update, context)
        return

    expected = user_progress[chat_id]["awaiting_answer"]["translation"].lower()
    user_answer = update.message.text.strip().lower()

    if user_answer == expected:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
        user_progress[chat_id]["current_index"] += 1
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {expected}")

    del user_progress[chat_id]["awaiting_answer"]
    await send_review(update, context)

# -------------------------------
# –ó–ê–î–ê–ß–ê –ù–ê 7 –£–¢–†–ê
# -------------------------------

async def send_review_job(app):
    try:
        dummy_update = type("obj", (object,), {
            "message": type("obj", (object,), {"chat_id": YOUR_CHAT_ID})
        })
        dummy_context = type("obj", (object,), {
            "bot": app.bot,
            "user_data": {}
        })
        await send_review(dummy_update, dummy_context)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞–¥–∞—á–µ:", e)

# -------------------------------
# –ó–ê–ü–£–°–ö
# -------------------------------

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", show_id))
    app.add_handler(CommandHandler("review", send_review))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (7:00 Asia/Almaty)
    scheduler = BackgroundScheduler(timezone=pytz.timezone("Asia/Almaty"))
    scheduler.add_job(send_review_job, "cron", hour=7, minute=0, args=[app])
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
